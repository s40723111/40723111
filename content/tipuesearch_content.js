var tipuesearch = {"pages": [{'title': '網路連線設定', 'text': '\n 了解機械設計系電腦輔助設計室電腦的網路設定, 其中包括 IPv4 網路與 IPv6 網路設定. \n', 'tags': '', 'url': '網路連線設定.html'}, {'title': '配置可攜程式環境', 'text': '取得 Windows 10 64 位元環境下的可攜程式環境  ( 下載\xa0 2019_cdb_w5.7z ), 下載後解開目錄, 放入 USB3.0 規格以上的隨身碟或隨身硬碟. \n 開啟start.bat即可以開啟隨身系統，以開啟stop.bat結束隨身系統 \n Y:\xa0 即切換至Y槽 \n cd ___\xa0 \xa0 切換至某目錄 \n cd ..\xa0 回至上一層目錄 \n cd / 回至目前所在槽 \n dir\xa0 \xa0列出目前所在目錄的內容 \n mkdir\xa0 在所在位置建立目錄 \n cls\xa0\xa0 清除目前的命令列顯示的內容 \n \n', 'tags': '', 'url': '配置可攜程式環境.html'}, {'title': '建立Git倉儲', 'text': '\n 建立 Git 倉儲, 共分為兩類 \n (1)\xa0 直接在 Github 網際介面下建立倉儲時, 要求建立 README.md 檔案, 之後可以直接在近端, 以 git clone 加上倉儲連線 URL, 將倉儲克隆一份到近端, 並以最新版本作為工作目錄, 使用者改版後, 可以直接透過 git add, commit 與 push 對遠端倉儲改版 \n \n (2)\xa0\xa0在 Github 網際介面下建立倉儲時, 不要建立任何檔案, 而是在近端自行利用 git 指令建立倉儲架構, 新增內容後, 以 git remote add 設法在近端倉儲中納入 origin URL 後, 將近端倉儲版本新增提交推送到遠端 \n \n \n', 'tags': '', 'url': '建立Git倉儲.html'}, {'title': 'Git指令', 'text': 'git add \xa0 可以用來新增一個檔案, 數個檔案, 或在之前提交後所新增的所有內容 \n git commit \xa0 可以將剛剛add新增之檔案提交至遠端，在執行前須先使用 git config 建立臨時或永久的身分註記, 因為 GIT 在展開所有改版內容時, 必須明確登錄這些變更的作者與時間. \n \xa0 (1)git commit -m "改版之標題" \n git push \xa0 可以將先前改變之內容提交至指定之遠端倉儲 \n git pull \xa0 \xa0將近端改版至遠端之最新版本 \n git status\xa0\xa0 查看是否有更新的版本 \n', 'tags': '', 'url': 'Git指令.html'}, {'title': '建立Github Pages', 'text': '自行建立靜態內容管理網站 \n 利用 CMSimfly ( https://github.com/chiamingyen/cmsimfly) 內容,，將其clone至可攜系統，並利用啟動近端來編輯內容改版使遠端內容更新 \n \n', 'tags': '', 'url': '建立Github Pages.html'}, {'title': '靜態 CMSimfly', 'text': '利用 CMSimfly (https://github.com/chiamingyen/cmsimfly) 內容, 建立自己的 Github Pages 網站 \n 設法利用 \xa0 HTML5 CSS 與 Javascript , 納入與機械設計相關的靜態網頁內容 \n 1.進入自己的倉儲資料夾 2.輸入python wsgi.py來開啟動態 3.進行改版或更新save 4.完成後按generate_pages來儲存 5.輸入git status > git add . > git commit -m "標題" > git push 6.到自己的倉儲檢查沒問題後即可 \n', 'tags': '', 'url': '靜態 CMSimfly.html'}, {'title': 'Javascript', 'text': '這裡是利用\xa0 HTML5 CSS 與 Javascript , 納入與機械設計相關的靜態網頁內容 \n', 'tags': '', 'url': 'Javascript.html'}, {'title': 'first', 'text': "Try it \n \n \n \n \n \n \n \n  Your browser doesn't support the HTML5 element canvas.      Throw dice  \n Stage:   Point:   Outcome:  \n", 'tags': '', 'url': 'first.html'}, {'title': 'canvas', 'text': " Your browser doesn't support the HTML5 element canvas.  \n \n 繪圖   清除 \n", 'tags': '', 'url': 'canvas.html'}, {'title': '國旗', 'text': '\n \n \n  以下利用 Brython 程式執行繪圖  \n \n <!-- for Brython -->\n<script src="./../static/brython.js"></script>\n<script src="./../static/brython_stdlib.js"></script>\n<!-- 啟動 brython() -->\n<p>\n<script>\nwindow.onload=function(){\nbrython(1);\n}\n</script>\n</p>\n<!-- 以下利用 Brython 程式執行繪圖 -->\n<p><canvas height="400" id="taiwan_flag" width="600"></canvas></p>\n<p>\n<script type="text/python3">\n# 導入 doc\nfrom browser import document as doc\nimport math\n \n# 準備繪圖畫布\ncanvas = doc["taiwan_flag"]\nctx = canvas.getContext("2d")\n# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點\n# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)\n# 以下採用 canvas 原始座標繪圖\nflag_w = canvas.width\nflag_h = canvas.height\ncircle_x = flag_w/4\ncircle_y = flag_h/4\n# 先畫滿地紅\nctx.fillStyle=\'rgb(255, 0, 0)\'\nctx.fillRect(0,0,flag_w,flag_h)\n# 再畫青天\nctx.fillStyle=\'rgb(0, 0, 150)\'\nctx.fillRect(0,0,flag_w/2,flag_h/2)\n# 畫十二道光芒白日\nctx.beginPath()\nstar_radius = flag_w/8\nangle = 0\nfor i in range(24):\n    angle += 5*math.pi*2/12\n    toX = circle_x + math.cos(angle)*star_radius\n    toY = circle_y + math.sin(angle)*star_radius\n    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo\n    if (i):\n        ctx.lineTo(toX, toY)\n    else:\n        ctx.moveTo(toX, toY)\nctx.closePath()\n# 將填色設為白色\nctx.fillStyle = \'#fff\'\nctx.fill()\n# 白日:藍圈\nctx.beginPath()\nctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)\nctx.closePath()\n# 填色設為藍色\nctx.fillStyle = \'rgb(0, 0, 149)\'\nctx.fill()\n# 白日:白心\nctx.beginPath()\nctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)\nctx.closePath()\n# 填色設為白色\nctx.fillStyle = \'#fff\'\nctx.fill()\n</script> \n \n \n \n', 'tags': '', 'url': '國旗.html'}, {'title': '國旗-2', 'text': '\n \n \n  以下利用 Brython 程式執行繪圖  \n <!-- for Brython --> <script src="./../static/brython.js"></script> <script src="./../static/brython_stdlib.js"></script> <!-- 啟動 brython() --> <p> <script>// <![CDATA[ window.onload=function(){ brython(1); } // ]]></script> </p> <!-- 以下利用 Brython 程式執行繪圖 --> <p><canvas height="400" id="taiwan_flag" width="600"></canvas></p> <p> <script type="text/python3">// <![CDATA[ # 導入 doc from browser import document as doc import math   # 準備繪圖畫布 canvas = doc["taiwan_flag"] ctx = canvas.getContext("2d") # 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點 # ctx.setTransform(1, 0, 0, -1, 0, canvas.height) # 以下採用 canvas 原始座標繪圖 flag_w = canvas.width flag_h = canvas.height circle_x = flag_w/2 circle_y = flag_h/2 # 先畫滿地青天 ctx.fillStyle=\'#00FFFF\' ctx.fillRect(0,0,flag_w,flag_h) # 再畫紫天 ctx.fillStyle=\'#9400D3\' ctx.fillRect(flag_w/3,flag_h/4,200,200) # 畫十二道光芒白日 ctx.beginPath() star_radius = flag_w/8 angle = 0 for i in range(24):  angle += 5*math.pi*2/12  toX = circle_x + math.cos(angle)*star_radius  toY = circle_y + math.sin(angle)*star_radius  # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo  if (i):  ctx.lineTo(toX, toY)  else:  ctx.moveTo(toX, toY) ctx.closePath() # 將填色設為白色 ctx.fillStyle = \'#fff\' ctx.fill() # 白日:藍圈 ctx.beginPath() ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True) ctx.closePath() # 填色設為綠色 ctx.fillStyle = \'#00FF7F\' ctx.fill() # 白日:白心 ctx.beginPath() ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True) ctx.closePath() # 填色設為白色 ctx.fillStyle = \'#fff\' ctx.fill() // ]]></script> </p> \n \n \n \n', 'tags': '', 'url': '國旗-2.html'}, {'title': 'Spur Gear1', 'text': '\n  啟動 Brython  \n \n \n  以下製作 button \n \n   Set Number of Gears \n  以下實際利用  Brython 繪圖 \n \n', 'tags': '', 'url': 'Spur Gear1.html'}, {'title': '解決問題', 'text': "網頁無法顯示Brython，Spur Gear 導入錯誤，案F12來開啟Console檢查錯誤。 \n 問題(一)如下圖 \n \n 解決方法: \n 開啟本倉儲資料夾，打開flaskapp.py，案ctrl+f來找到 page_content = request.form['page_content']，有2個地方都在底下加入 \n page_content = page_content.replace('// \xa0 <![CDATA[', '') \n page_content = page_content.replace('// ]]> ', '') \n \n save後即可解決問題。 \n \n \n", 'tags': '', 'url': '解決問題.html'}, {'title': 'Virtual Host', 'text': 'Fossil SCM 如何利用 Fossil SCM, 在 Virtualbox 中的 Ubuntu 18.04-2 (8.5 GB) 建立類似 Github 的系統, 可以放入 CMSimfly 的靜態網頁 Ubuntu 18.04 (https://www.ubuntu.com/about/release-cycle), 配置網路連線, 然後架構 uwsgi 環境下的 CMSimfly 動態網站, 或建立 Fossil SCM 用來伺服管理 CMSimfly 下有版次管理的靜態網頁, 或利用 nginx 伺服無版次管理的 CMSimfly 靜態網頁. \n', 'tags': '', 'url': 'Virtual Host.html'}, {'title': '架設虛擬主機', 'text': '1.google輸入ubuntu > 點選官網 > 下載 ubuntu server 2.打開virtualbox > New > 輸入名子 > 4096 MB 3.Cearte > VMDK > Dynamically > 500.00 GB 4.Sttings > Network > bridged Adapter > 進入網路中心 5.選擇電腦所使用的連接網路 > ok > Start 6.選取剛剛所下載的ubuntu > 開始 > 選取語言 7.Enter >\xa0 Enter > 輸入proxy :http://140.130.17.3:3128 8. Enter \xa0>\xa0 Enter \xa0>\xa0 Enter \xa0> continue > 全部都打一樣的 9.space >\xa0 Enter \xa0>\xa0 Enter \xa0> 再輸入帳密 > 即可開始設定 10. \xa0輸入 sudo apt install uwsgi 來安裝uwsgi \n \n \n', 'tags': '', 'url': '架設虛擬主機.html'}, {'title': '期中影片', 'text': '\n', 'tags': '', 'url': '期中影片.html'}, {'title': '期末報告', 'text': '\n \n  for Brython  \n \n \n  啟動 brython()  \n \n \n \n  以下利用 Brython 程式執行繪圖  \n \n \n \n \n \n', 'tags': '', 'url': '期末報告.html'}]};